using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace ITI_EF_Project
{
    // ======================
    // Student
    // ======================
    public class Student
    {
        [Key]
        public int Id { get; set; }

        [Required, MaxLength(50)]
        [Column("StudentName", TypeName = "varchar(50)")]
        public string Name { get; set; }

        [Range(18, 60)]
        public int Age { get; set; }

        [MaxLength(100)]
        public string Address { get; set; }

        // Navigation (Many-to-Many with Course)
        public ICollection<Course> Courses { get; set; }
    }

    // ======================
    // Instructor
    // ======================
    public class Instructor
    {
        [Key]
        public int Id { get; set; }

        [Required, MaxLength(50)]
        public string Name { get; set; }

        [Column(TypeName = "money")]
        public decimal Salary { get; set; }

        // Foreign Key
        public int DepartmentId { get; set; }

        // Navigation
        public Department Department { get; set; }
        public ICollection<Course> Courses { get; set; }
    }

    // ======================
    // Course
    // ======================
    public class Course
    {
        [Key]
        public int Id { get; set; }

        [Required, MaxLength(100)]
        public string Title { get; set; }

        public int Hours { get; set; }

        // Foreign Keys
        public int DepartmentId { get; set; }
        public int? InstructorId { get; set; } // optional

        // Navigation
        public Department Department { get; set; }
        public Instructor Instructor { get; set; }
        public ICollection<Student> Students { get; set; }
    }

    // ======================
    // Department
    // ======================
    public class Department
    {
        [Key]
        public int Id { get; set; }

        [Required, MaxLength(50)]
        public string Name { get; set; }

        [MaxLength(100)]
        public string Location { get; set; }

        // Navigation
        public ICollection<Instructor> Instructors { get; set; }
        public ICollection<Course> Courses { get; set; }
    }

    // ======================
    // DbContext
    // ======================
    public class ITIDbContext : DbContext
    {
        public DbSet<Student> Students { get; set; }
        public DbSet<Instructor> Instructors { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Department> Departments { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            
            optionsBuilder.UseSqlServer(@"Server=.;Database=ITI_DB;Trusted_Connection=True;");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // ======================
            // Student ↔ Course (Many-to-Many)
            // ======================
            modelBuilder.Entity<Student>()
                .HasMany(s => s.Courses)
                .WithMany(c => c.Students)
                .UsingEntity(j => j.ToTable("Enrollments"));

            // ======================
            // Department ↔ Instructor (One-to-Many)
            // ======================
            modelBuilder.Entity<Department>()
                .HasMany(d => d.Instructors)
                .WithOne(i => i.Department)
                .HasForeignKey(i => i.DepartmentId);

            // ======================
            // Department ↔ Course (One-to-Many)
            // ======================
            modelBuilder.Entity<Department>()
                .HasMany(d => d.Courses)
                .WithOne(c => c.Department)
                .HasForeignKey(c => c.DepartmentId);

            // ======================
            // Instructor ↔ Course (One-to-Many, optional)
            // ======================
            modelBuilder.Entity<Instructor>()
                .HasMany(i => i.Courses)
                .WithOne(c => c.Instructor)
                .HasForeignKey(c => c.InstructorId)
                .OnDelete(DeleteBehavior.SetNull);
        }
    }
}
